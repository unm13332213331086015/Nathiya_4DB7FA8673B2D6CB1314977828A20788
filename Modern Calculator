import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QGridLayout, QPushButton, QLineEdit
from PyQt5.QtCore import Qt

class Calculator(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Modern Calculator")
        self.setFixedSize(300, 400)
        self.setStyleSheet("""
            QWidget {
                background-color: #2c3e50;
                color: white;
                font-size: 18px;
            }
            QLineEdit {
                background-color: #1e272e;
                border: none;
                padding: 15px;
                font-size: 24px;
                color: white;
            }
            QPushButton {
                background-color: #34495e;
                border: none;
                border-radius: 5px;
                padding: 15px;
            }
            QPushButton:hover {
                background-color: #3c5f78;
            }
            QPushButton:pressed {
                background-color: #2c3e50;
            }
        """)

        self.create_ui()

    def create_ui(self):
        # Layouts
        main_layout = QVBoxLayout()
        self.display = QLineEdit()
        self.display.setAlignment(Qt.AlignRight)
        self.display.setReadOnly(True)

        main_layout.addWidget(self.display)

        grid_layout = QGridLayout()

        buttons = [
            ['C', '%','←', '/'],
            ['7', '8', '9', '*'],
            ['4', '5', '6', '-'],
            ['1', '2', '3', '+'],
            ['00','0', '.', '=']
        ]

        for row, row_values in enumerate(buttons):
            for col, text in enumerate(row_values):
                if text:
                    button = QPushButton(text)
                    button.clicked.connect(self.on_button_click)
                    grid_layout.addWidget(button, row, col)

        main_layout.addLayout(grid_layout)
        self.setLayout(main_layout)

    def on_button_click(self):
        sender = self.sender()
        text = sender.text()
        current = self.display.text()

        if text == 'C':
            self.display.clear()
        elif text == '←':
            self.display.setText(current[:-1])
        elif text == '=':
            try:
                result = str(eval(current))
                self.display.setText(result)
            except Exception:
                self.display.setText("Error")
        else:
            self.display.setText(current + text)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Calculator()
    window.show()
    sys.exit(app.exec_())vvvvv
